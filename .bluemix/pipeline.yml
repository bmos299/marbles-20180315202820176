---
stages:
- name: Deploy Marbles Application
  inputs:
  - type: git
    branch: v4.0
    service: ${SAMPLE_REPO}
  triggers:
  - type: commit
  properties:
  - name: SERVICE_INSTANCE_NAME
    value: '{{sin}}'
    type: text
  - name: SAMPLE_REPO
    value: '{{SAMPLE_REPO}}'
    type: text
  - name: REGION_ID
    value: '{{PROD_REGION_ID}}'
    type: text
  - name: REGION_ID2
    value: ${PROD_REGION_ID}
    type: text
  jobs:
  - name: deploy-marbles-app
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: '{{org_name}}'
      space: '{{space_name}}'
      application: ${CF_APP_NAME}
    script: |
      #!/bin/bash
      trap 'detect_exit' 0 1 2 3 6

      export IBP_NAME="ibm-blockchain-5-dev"
      export IBP_PLAN="ibm-blockchain-plan-v1-starter-dev"
      export VCAP_KEY_NAME="marbles_tc_creds"
      export CHANNEL="defaultchannel"
      export TIMESTAMP=$(date +%s)
      export APP_URL="unknown_yet"                    # we correct this later

      echo "what the hell is this 1 ${REGION_ID}"
      echo "what the hell is this 2 ${REGION_ID2}"
      echo "what the hell is this 3 ${SAMPLE_REPO}"

      detect_exit()
      {
        if [ "$COMPLETED_STEP" != "4" ]; then
          printf "\n\n --- Uh oh something failed... ---\n"
          if [ "$COMPLETED_STEP" == "3" ]; then
            echo "The application failed to start, lets get the cf logs eh?"
            cf logs $CF_APP --recent
          fi
          export COMPLETED_STEP="-1"
          if [ "$API_HOST" != "" ]; then
            update_status
          fi
        else
          echo "Script completed successfully. =)"
        fi
      }

      update_status()
      {
        echo "Updating Deployment Status - ${NETWORK_ID}"
        echo '{"app": "'"$CF_APP"'", "url": "'"$APP_URL"'", "status": '$COMPLETED_STEP'}'
        curl -X PUT -s -S\
          "$API_HOST/api/v1/networks/$NETWORK_ID/sample/marbles" \
          -H 'Cache-Control: no-cache' \
          -H 'Content-Type: application/json' \
          -u $API_KEY:$API_SECRET \
          -d '{"app": "'"$CF_APP"'", "url": "'"$APP_URL"'", "completed_step": '$COMPLETED_STEP'}' \
          | ./jq '.' || true
      }

      # -----------------------------------------------------------
      # Detect if there is already a service we should use - [ Optional ]
      # -----------------------------------------------------------
      #printf "\n --- Detecting service options ---\n"
      #if [ "$SERVICE_INSTANCE_NAME" != "" ]; then
      #  echo "A service instance name was provided, lets use that"
      #else
      #  echo "A service instance name was NOT provided, lets use the default one"
      #  export SERVICE_INSTANCE_NAME="IBP-$TIMESTAMP"
      #fi
      #printf "Using service instance name '${SERVICE_INSTANCE_NAME}'\n"

      # -----------------------------------------------------------
      # 0. Install Things We Need
      # -----------------------------------------------------------
      printf "\n\nInstalling jq for json parsing\n"
      wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64
      chmod +x jq

      # -----------------------------------------------------------
      # 1. Test if everything we need is set
      # -----------------------------------------------------------
      printf "\n --- Testing if the script has what it needs ---\n"
      export SCRIPT_ERROR="nope"
        if [ "$IBP_NAME" == "" ]; then
        echo "Error - bad script setup - IBP_NAME was not provided (IBM Blockchain service name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$IBP_PLAN" == "" ]; then
        echo "Error - bad script setup - IBP_PLAN was not provided (IBM Blockchain service's plan name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$VCAP_KEY_NAME" == "" ]; then
        echo "Error - bad script setup - VCAP_KEY_NAME was not provided (Bluemix service credential key name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$SERVICE_INSTANCE_NAME" == "" ]; then
        echo "Error - bad script setup - SERVICE_INSTANCE_NAME was not provided (IBM Blockchain service instance name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$CF_APP" == "" ]; then
        echo "Error - bad script setup - CF_APP was not provided (Marbles application name)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$CHANNEL" == "" ]; then
        echo "Error - bad script setup - CHANNEL was not provided (name of the channel to use)"
        export SCRIPT_ERROR="yep"
      fi
      if [ "$SCRIPT_ERROR" == "yep" ]; then
        exit 1
      else
        printf "Using service instance name '${SERVICE_INSTANCE_NAME}', and Network ID ${NETWORK_ID}\n"
        echo "All good"
      fi

      # -----------------------------------------------------------
      # 2. Create a service instance (this is okay to run if the service name already exists as long as its the same typeof service)
      # -----------------------------------------------------------
      printf "\n --- Creating/checking an instance of the IBM Blockchain Platform service ---\n"
      #cf create-service ${IBP_NAME} ${IBP_PLAN} "${SERVICE_INSTANCE_NAME}"
      cf create-service-key "${SERVICE_INSTANCE_NAME}" ${VCAP_KEY_NAME} -c '{"msp_id":"PeerOrg1"}'

      # -----------------------------------------------------------
      # 3. Get service credentials into our file system (remove the first two lines from cf service-key output)
      # -----------------------------------------------------------
      printf "\n --- Getting service credentials ---\n"
      cf service-key "${SERVICE_INSTANCE_NAME}" ${VCAP_KEY_NAME} > ./config/temp.txt
      tail -n +2 ./config/temp.txt > ./config/marbles_tc.json
      #cat ./config/marbles_tc.json -b             # uncomment this if you are okay with your service creds being logged
      export API_HOST="$(cat ./config/marbles_tc.json | ./jq '.credentials[0]["x-api"].url' -r)"
      export API_KEY="$(cat ./config/marbles_tc.json | ./jq '.credentials[0]["x-api"].key' -r)"
      export API_SECRET="$(cat ./config/marbles_tc.json | ./jq '.credentials[0]["x-api"].secret' -r)"
      export NETWORK_ID="$(cat ./config/marbles_tc.json | ./jq '.credentials[0]["x-api"].network_id' -r)"
      echo "JQ results: api host=$API_HOST, key=$API_KEY"
      export COMPLETED_STEP="1"
      update_status

      # -----------------------------------------------------------
      # 4. Install and instantiate the chaincode
      # -----------------------------------------------------------
      printf "\n\n --- Installing chaincode ---\n\n"
      curl -X POST \
        "$API_HOST/api/v1/networks/$NETWORK_ID/chaincode/install" \
        -H 'Cache-Control: no-cache' \
        -H 'content-type: multipart/form-data;' \
        -u $API_KEY:$API_SECRET\
        -F 'files[]=@./chaincode/src/marbles/lib.go' \
        -F 'files[]=@./chaincode/src/marbles/marbles.go' \
        -F 'files[]=@./chaincode/src/marbles/read_ledger.go' \
        -F 'files[]=@./chaincode/src/marbles/write_ledger.go' \
        -F chaincode_id=$CF_APP \
        -F chaincode_version=$TIMESTAMP \
        --connect-timeout 30
      export COMPLETED_STEP="2"
      update_status

      # -----------------------------------------------------------
      # 5. Instantiate the chaincode
      # -----------------------------------------------------------
      printf "\n\n --- Instantiating chaincode on channel $CHANNEL ---\n\n"
      curl -X POST \
        "$API_HOST/api/v1/networks/$NETWORK_ID/channels/$CHANNEL/chaincode/instantiate" \
        -H 'Cache-Control: no-cache' \
        -H 'Content-Type: application/json' \
        -u $API_KEY:$API_SECRET \
        -d '{"chaincode_id":"'"$CF_APP"'", "chaincode_version":"'"$TIMESTAMP"'", "chaincode_arguments":"[\"12345\"]"}' \
        --connect-timeout 120
      export COMPLETED_STEP="3"
      update_status

      # -----------------------------------------------------------
      # 6. Push application (don't start yet, wait for binding)
      # -----------------------------------------------------------
      printf "\n --- Creating the Marbles application ---\n"
      cf push $CF_APP --no-start
      cf set-env $CF_APP CHAINCODE_ID $CF_APP               # pass these to the app so we know which one to use
      cf set-env $CF_APP CHAINCODE_VERSION $TIMESTAMP
      export APP_URL=$(cf app $CF_APP | grep -Po "(?<=routes:)\s*\S*")

      # -----------------------------------------------------------
      # 7. Bind application to the blockchain service
      # -----------------------------------------------------------
      printf "\n --- Binding the IBM Blockchain Platform service to Marbles ---\n"
      cf bind-service $CF_APP "${SERVICE_INSTANCE_NAME}" -c "{\"permissions\":\"read-only\"}"

      # -----------------------------------------------------------
      # 8. Start her up
      # -----------------------------------------------------------
      printf "\n --- Starting Marbles ---\n"
      cf start $CF_APP

      # -----------------------------------------------------------
      # 9. Update IBP that the application is alive
      # -----------------------------------------------------------
      export COMPLETED_STEP="4"
      update_status
      printf "\n\n --- We are done here. ---\n\n"
